// helper mixins
//
// @author             Michael Schulze
// @version            $1.3.4$
// @copyright          Michael Schulze, 30 March, 2012
// @license            MIT license
//
// @package            yaml,compass,sass
// @-yaml-minver       4.0.1
// @-sass-minver       3.2
// @-compass-minver    0.12.2
//
// @lastmodified       $Date: 2012-09-15 15:39:59 +0200 (Sa., 15 Sep 2012) $

// image replacement by Nicolas Gallagher (2011)
// http://nicolasgallagher.com/another-css-image-replacement-technique/
@mixin image-replace($image: null, $display: null, $reset-border-background: true) {
  font: 0/0 a;
  text-shadow: none;
  color: transparent;

  // reset the border and background-color
  // see http://css-tricks.com/examples/ImageReplacement/ -> 2012 H5BP Image Replacement
  @if $reset-border-background == true {
    border: 0;
    background-color: transparent;
  }
  @if $image != null {
    @include image-and-dimensions($image, $display);
  } @else if $display != null {
    display: $display;
  }
}

// image replacement from HTML5 boilerplate (2012)
// https://github.com/h5bp/html5-boilerplate/blob/master/css/main.css
@mixin image-replace-h5bp($image: null, $display: null, $reset-border-background: true) {
  overflow: hidden;
  /* IE 6/7 fallback */
  *text-indent: -9999px;

  &:before {
    content: "";
    display: block;
    width: 0;
    height: 100%;
  }

  @if $reset-border-background == true {
    border: 0;
    background-color: transparent;
  }
  @if $image != null {
    @include image-and-dimensions($image, $display);
  } @else if $display != null {
    display: $display;
  }
}

// Phark Method (2003)
// Very likely the most widely used method.
// Problematic in RTL situations (or anywhere text-align isn't left).
@mixin image-replace-indent($image: null, $display: null, $reset-border-background: false) {
  text-indent: -9999px;

  // reset the border and background-color
  @if $reset-border-background == true {
    border: 0;
    background-color: transparent;
  }
  @if $image != null {
    @include image-and-dimensions($image, $display);
  } @else if $display != null {
    display: $display;
  }
}

// set dimensions to a given image
@mixin image-dimensions($image) {
  width: image-width($image);
  height: image-height($image);
}

// set background image and dimensions
@mixin image-and-dimensions($image, $display: null){
  @if $display != null {
    display: $display;
  }
  background: transparent image-url("#{$image}") no-repeat;
  @include image-dimensions($image);
}

// standard clearfix
// http://css-tricks.com/snippets/css/clear-fix/
@mixin clearfix() {
  &:after {
    visibility: hidden;
    display: block;
    font-size: 0;
    content: " ";
    clear: both;
    height: 0;
  }
  * html &             { zoom: 1; } /* IE6 */
  *:first-child+html & { zoom: 1; } /* IE7 */
}

// YAML clearfix method
// https://github.com/djesse/yaml4-sass/blob/master/sass/yaml/core/base-modules/_float-handling.scss
@mixin ym-clearfix() {
  &:before {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
    content: ".";
    display: block;
    font-size: 0;
    height: 0;
    visibility: hidden;
  }
}

// micro clearfix from Nicolas Gallagher
// http://css-tricks.com/snippets/css/clear-fix/
@mixin micro-clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
  } 
  &:after {
    clear: both;
  }
  & {
    zoom: 1; /* For IE 6/7 (trigger hasLayout) */
  }
}

// cross browser display inline-block
// http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/
// http://foohack.com/2007/11/cross-browser-support-for-inline-block-styling/
@mixin inline-block() {
  display: inline-block;
  float: none;
  
  /* IE7 bugfix */
  *display: inline;
  zoom: 1;
}

// get first child of element and also th first child inside an
// header element which is the first child.
@mixin first-child {
  > *:first-child,
  > header:first-child *:first-child {
    @content;
  }
}

@mixin font-face($name, $filename, $font-key, $path: $path, $font-weight: normal, $font-style: normal) {
  @font-face {
      font-family: "#{$name}";
      src: url('#{$path}/#{$filename}.eot');
      src: url('#{$path}/#{$filename}.eot?#iefix') format('embedded-opentype'),
           url('#{$path}/#{$filename}.woff') format('woff'),
           url('#{$path}/#{$filename}.ttf') format('truetype'),
           url('#{$path}/#{$filename}.svg##{$font-key}') format('svg');
      font-weight: $font-weight;
      font-style: $font-style;
  }
}